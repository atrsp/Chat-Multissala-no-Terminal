import threading
import socket
import os

# Configura√ß√£o do cliente
port = 7777  # Porta do servidor
IP = "localhost"  # Endere√ßo IP do servidor

# Fun√ß√£o para limpar a tela do terminal
def clear_screen():
    # Verifica o sistema operacional e executa o comando apropriado para limpar a tela
    os.system('cls' if os.name == 'nt' else 'clear')

# Fun√ß√£o para exibir o menu inicial com comandos dispon√≠veis
def show_menu():
    clear_screen()
    # Exibe o menu com cores e emojis para melhorar a experi√™ncia do usu√°rio
    print("\033[1;36m" + "="*40)
    print("     üéâ Bem-vindo ao Chat Multissala üéâ")
    print("="*40 + "\033[0m")
    print("\n\033[1;33mCOMANDOS DISPON√çVEIS:\033[0m")
    print("  üîπ \033[1;32m/sair\033[0m       - Sai da sala atual e volta ao menu.")
    print("  üîπ \033[1;31m/encerrar\033[0m   - Fecha completamente a conex√£o.")
    print("  üîπ \033[1;34m/quem\033[0m    - Lista os usu√°rios de uma sala.")
    print("  üîπ \033[1;35m@usu√°rio\033[0m    - Envia mensagem privada para um usu√°rio.")
    print("\nüåü \033[1;36mDivirta-se e boas conversas!\033[0m\n")
    print("="*40 + "\n")

# Fun√ß√£o principal do cliente
def main():
    show_menu()
    # Cria um socket TCP/IP
    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    # Tentativa de conex√£o com o servidor
    try:
        client.connect((IP, port))
    except:
        # Se a conex√£o falhar, exibe uma mensagem de erro e encerra o programa
        return print("\n\033[1;31mN√£o foi poss√≠vel conectar ao servidor.\033[0m\n")

    # Inicia uma thread para receber mensagens do servidor
    threading.Thread(target=receive, args=[client]).start()

    # Chama a fun√ß√£o que permite o envio de mensagens pelo usu√°rio
    send(client)

# Fun√ß√£o para receber mensagens do servidor
def receive(client):
    while True:
        try:
            # Recebe mensagens do servidor (tamanho m√°ximo de 2048 bytes)
            msg = client.recv(2048).decode()
            if not msg:
                # Se a mensagem estiver vazia, a conex√£o foi encerrada
                break
            print(msg)
        except:
            # Se ocorrer um erro, encerra a conex√£o
            break

    print("\n\033[1;31mConex√£o encerrada pelo servidor.\033[0m")
    os._exit(0)  # Encerra o programa

# Fun√ß√£o para enviar mensagens para o servidor
def send(client):
    while True:
        try:
            # Captura a mensagem digitada pelo usu√°rio
            msg = input()
            client.send(msg.encode())  # Envia a mensagem para o servidor

            # Se o usu√°rio digitar "/encerrar", fecha a conex√£o
            if msg.lower() == "/encerrar":
                print("\n\033[1;31mEncerrando conex√£o...\033[0m\n")
                client.close()
                break
        except:
            # Se ocorrer um erro, encerra a conex√£o
            break

# Inicia o cliente
main()